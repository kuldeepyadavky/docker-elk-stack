services:

  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file. It also creates the
  # roles required by some of these users.
  #
  # This task only needs to be performed once, during the *initial* startup of
  # the stack. Any subsequent run will reset the passwords of existing users to
  # the values defined inside the '.env' file, and the built-in roles to their
  # default permissions.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up setup'.
  setup:
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELK_STACK_VERSION: ${ELK_STACK_VERSION}  # The version of the ELK stack.
        XPACK_SECURITY_ENABLED: ${XPACK_SECURITY_ENABLED:-}  # Enables X-Pack security features.
        CLUSTER_NAME: ${CLUSTER_NAME:-docker-cluster}  # Name of the Elasticsearch cluster.
        LICENSE: ${LICENSE:-basic}  # License type for Elasticsearch (e.g., 'basic').
    init: true  # Indicates that this service should run only once during the initial startup.
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z  # Entrypoint script to initialize roles and users.
      - ./setup/lib.sh:/lib.sh:ro,Z  # Additional script libraries for the setup process.
      - ./setup/roles:/roles:ro,Z  # Directory containing role definitions.
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}  # Password for the 'elastic' user.
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}  # Password for the Logstash internal user.
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}  # Password for the Kibana system user.
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
      XPACK_REPORTING_CSV_MAX_SIZE_BYTES: ${XPACK_REPORTING_CSV_MAX_SIZE_BYTES:-}
      ELASTIC_REQUEST_TIMEOUT: ${ELASTIC_REQUEST_TIMEOUT:-}
      XPACK_SECURITY_ENABLED: ${XPACK_SECURITY_ENABLED:-}
      MONITORING_ELASTICSEARCH_IN_UI: ${MONITORING_ELASTICSEARCH_IN_UI:-}
      CLUSTER_NAME: ${CLUSTER_NAME:-docker-cluster}
      LICENSE: ${LICENSE:-basic}
    networks:
      - elk
    depends_on:
      - elasticsearch  # The setup service depends on Elasticsearch.

    # Elasticsearch service
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_STACK_VERSION: ${ELK_STACK_VERSION}  # Version of Elasticsearch.
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z  # Custom Elasticsearch configuration file.
      - ./elasticsearch/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z  # JVM options for Elasticsearch.
      - ./elasticsearch:/usr/share/elasticsearch/data:Z  # Volume for Elasticsearch data.
      # - /mnt/ssd/elasticsearch:/usr/share/elasticsearch/data:Z # Uncomment to mount data to SSD for better performance.
    ports:
      - ${ES_HTTP_PORT}:9200  # HTTP port for Elasticsearch.
      - ${ES_TCP_PORT}:9300  # TCP port for Elasticsearch.
    environment:
      node.name: elasticsearch  # Node name for Elasticsearch.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      ELASTIC_REQUEST_TIMEOUT: ${ELASTIC_REQUEST_TIMEOUT:-}
      XPACK_SECURITY_ENABLED: ${XPACK_SECURITY_ENABLED:-}
      MONITORING_ELASTICSEARCH_IN_UI: ${MONITORING_ELASTICSEARCH_IN_UI:-}
      CLUSTER_NAME: ${CLUSTER_NAME:-docker-cluster}
      LICENSE: ${LICENSE:-basic}
      discovery.type: single-node  # Run Elasticsearch in single-node mode (disables production mode checks).
    networks:
      - elk
    ulimits:
      memlock:
        soft: -1
        hard: -1  # Unlimited memory lock for Elasticsearch.
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-u", "elastic:${ELASTIC_PASSWORD}", "-f", "http://${ELASTICSEARCH_HOST}:${ES_HTTP_PORT}/_cluster/health?wait_for_status=yellow&timeout=50s", "||", "echo", "Health check failed"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s

  # Kibana service
  kibana:
    build:
      context: kibana/
      args:
        ELK_STACK_VERSION: ${ELK_STACK_VERSION}  # Version of Kibana.
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z  # Custom Kibana configuration file.
    ports:
      - ${KIBANA_HTTP_PORT}:5601  # HTTP port for Kibana.
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
      XPACK_REPORTING_CSV_MAX_SIZE_BYTES: ${XPACK_REPORTING_CSV_MAX_SIZE_BYTES:-}
      ELASTIC_REQUEST_TIMEOUT: ${ELASTIC_REQUEST_TIMEOUT:-}
      XPACK_SECURITY_ENABLED: ${XPACK_SECURITY_ENABLED:-}
      MONITORING_ELASTICSEARCH_IN_UI: ${MONITORING_ELASTICSEARCH_IN_UI:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${ELASTICSEARCH_HOST}:${KIBANA_HTTP_PORT}", "||", "echo", "Health check failed"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s

  # Logstash service
  logstash:
    build:
      context: logstash/
      args:
        ELK_STACK_VERSION: ${ELK_STACK_VERSION}  # Version of Logstash.
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z  # Custom Logstash configuration file.
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z  # Directory containing Logstash pipeline configurations.
      - ./logstash/jvm.options:/usr/share/logstash/config/jvm.options:ro,Z  # JVM options for Logstash.
      - ./logstash:/usr/share/logstash/logs:Z # Volume for Logstash data.
      # - /mnt/ssd/logstash-logs:/usr/share/logstash/logs:Z # Uncomment to mount logs to SSD.
    ports:
      - ${LOGSTASH_PORT}:5044  # Port for Logstash Beats input.
      - ${LOGSTASH_TCP_PORT}:50000/tcp  # TCP input port for Logstash.
      - ${LOGSTASH_UDP_PORT}:50000/udp  # UDP input port for Logstash.
      - ${LOGSTASH_MONITORING_PORT}:9600  # Monitoring port for Logstash.
    environment:
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/pipelines", "||", "echo", "Health check failed"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s

networks:
  elk:
    driver: bridge  # Bridge network for connecting all services.

volumes:
  elasticsearch:  # Named volume for persisting Elasticsearch data.